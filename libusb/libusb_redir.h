#ifndef LIBUSB_REDIR_H
#define LIBUSB_REDIR_H

#include "libusb.h"
#include "libusbi.h"

/* FIXME should specify LE/BE for network, also same for USB */

/* Terminology:
 * - Initiator: this is program that sends the USB commands (e.g. libusb redir backend)
 *   and is trying to communicate with USB devices
 * - Target: this is the program that receives commands and actually sends them
 *   USB devices and send back the result to the initiator
 * NOTE
 * - The iniator and target communicate over a channel, this could be a pipe, TCP, etc
 *   but there is no assumption here except that it is reliable. In particular,
 *   the initiator could be a TCP host or client.
 */
#define LIBUSB_REDIR_HELLO_MAGIC    0x7573627265646972ULL /* "usbredir" */

typedef enum libusb_redir_protocol_version
{
    LIBUSB_REDIR_V1 = 1,
} libusb_redir_protocol_version_t;

/* List of all possible packet types. Some are valid in both directions, but
 * some can only be sent by the iniator or target. */
typedef enum libusb_redir_packet_type
{
    /* Initial exchange between initiator and target to check version. */
    LIBUSB_REDIR_HELLO = 0,
    /* Target->Initiator: sent when a device is discovered. */
    LIBUSB_REDIR_NEW_DEVICE,
    /* Target->Initiator: sent when the initial device discovery is done. */
    LIBUSB_REDIR_INITIAL_DISCOVERY_DONE,
} libusb_redir_packet_type_t;

/* Every packet starts with this header */
struct libusb_redir_packet_header
{
    uint32_t type; /* libusb_redir_packet_type_t */
    uint32_t length; /* Length of payload (exclude this header) */
} LIBUSB_PACKED;
typedef struct libusb_redir_packet_header libusb_redir_packet_header_t;

/* Sent by initiator to request information about the supported protocol.
 * The target respond with a packet of the same type. */
struct libusb_redir_hello_packet
{
    uint64_t magic; /* LIBUSB_REDIR_HELLO_MAGIC */
    uint32_t protocol_version; /* libusb_redir_protocol_version_t */
    char impl_version[64]; /* Free-form version of implementation, for debug purpose */
} LIBUSB_PACKED;
typedef struct libusb_redir_hello_packet libusb_redir_hello_packet_t;

/* Sent by the target to report the discovery of a new device. */
struct libusb_redir_new_device
{
    uint32_t device_id; /* Unique ID generated by the target. */
    struct usbi_device_descriptor dev_desc; /* Device descriptor. */
    uint8_t active_config; /* Active configuration value. */
    /* This is followed by the list of *all* complete configuration descriptors.
     * Since dev_desc gives the number of configurations and each configuration
     * descriptor contains its total size, the initiator will be able to parse it. */
    struct usbi_configuration_descriptor all_config_desc[0];
} LIBUSB_PACKED;
typedef struct libusb_redir_new_device libusb_redir_new_device_t;


#endif /* LIBUSB_REDIR_H */
